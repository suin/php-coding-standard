# PSR-1: Basic Coding Standard
# https://www.php-fig.org/psr/psr-1/

services:
  # 2. Files
  # ========

  # 2.1. PHP Tags
  # -------------

  # PHP code MUST use the long <?php ?> tags or the short-echo <?= ?> tags; it
  # MUST NOT use the other tag variations.
  PhpCsFixer\Fixer\PhpTag\FullOpeningTagFixer:

  # 2.2. Character Encoding
  # -----------------------

  # PHP code MUST use only UTF-8 without BOM.
  PhpCsFixer\Fixer\Basic\EncodingFixer:
  PHP_CodeSniffer\Standards\Generic\Sniffs\Files\ByteOrderMarkSniff:

  # 2.3. Side Effects
  # -----------------

  # A file SHOULD declare new symbols (classes, functions, constants,
  # etc.) and cause no other side effects, or it SHOULD execute logic with side
  # effects, but SHOULD NOT do both.
  #
  # The phrase “side effects” means execution of logic not directly related to
  # declaring classes, functions, constants, etc., merely from including the
  # file.
  #
  # “Side effects” include but are not limited to: generating output, explicit
  # use of require or include, connecting to external services, modifying ini
  # settings, emitting errors or exceptions, modifying global or static variables,
  # reading from or writing to a file, and so on.
  PHP_CodeSniffer\Standards\PSR1\Sniffs\Files\SideEffectsSniff:

  # 3. Namespace and Class Names
  # ============================

  # Namespaces and classes MUST follow an “autoloading” PSR: [PSR-0, PSR-4].
  #
  # This means each class is in a file by itself, and is in a namespace of at
  # least one level: a top-level vendor name.
  PHP_CodeSniffer\Standards\PSR1\Sniffs\Classes\ClassDeclarationSniff:

  # Class names MUST be declared in StudlyCaps.
  PHP_CodeSniffer\Standards\Squiz\Sniffs\Classes\ValidClassNameSniff:

  # Code written for PHP 5.3 and after MUST use formal namespaces.
  #
  # (There is no checking)

  # 4. Class Constants, Properties, and Methods
  # ===========================================

  # 4.1. Constants
  # --------------

  # Class constants MUST be declared in all upper case with underscore separators.
  PHP_CodeSniffer\Standards\Generic\Sniffs\NamingConventions\UpperCaseConstantNameSniff:

  # 4.2. Properties
  # ---------------

  # This guide intentionally avoids any recommendation regarding the use of
  # $StudlyCaps, $camelCase, or $under_score property names.
  #
  # Whatever naming convention is used SHOULD be applied consistently within a
  # reasonable scope. That scope may be vendor-level, package-level, class-level,
  # or method-level.
  #
  # (There is no checking)

  # 4.3. Methods
  # ------------

  # Method names MUST be declared in camelCase().
  PHP_CodeSniffer\Standards\PSR1\Sniffs\Methods\CamelCapsMethodNameSniff:
